export default {
    compoundConsonants: [
        {
            letter: 'ၚ',
            tone: 'breathy',
            ipa: 'ŋɛ̤ˀ',
            th: 'เงี่ยะ',
            thLetter: 'ง',
            sound: require('@/assets/sounds/alphabets/row1Column5.mp3'),
            compoundIPA: 'ŋ',
            compoundTH: 'ง',
            compound: '္ၚ',
            example: 'က + -္ၚ + = က္ၚ',
            exampleIPA: 'kaˀŋaˀ',
            exampleTH: 'กะงะ',
            compoundWith: ['က', 'တ', 'ဒ', 'ပ', 'ဗ', 'မ', 'လ', 'သ', 'အ'],
        },
        {
            letter: 'ည',
            letter2: 'ဥ',
            tone: 'breathy',
            ipa: 'ɲɛ̤ˀ',
            th: 'เญียะ',
            thLetter: 'ญ',
            sound: require('@/assets/sounds/alphabets/row2Column5.mp3'),
            compoundIPA: 'ɲ',
            compoundTH: 'ญ',
            compound: '္ည',
            example: 'က + -္ည + = က္ည',
            exampleIPA: 'kaˀɲaˀ',
            exampleTH: 'กะญะ',
            compoundWith: ['က', 'ဂ', 'ဒ', 'ပ'],
        },
        {
            letter: 'ဍ',
            tone: 'clear',
            ipa: 'ɗaˀ',
            th: 'ดะ',
            thLetter: 'ฑ',
            sound: require('@/assets/sounds/alphabets/row3Column3.mp3'),
            compoundIPA: 'ɗ',
            compoundTH: 'ด',
            compound: '္ဍ',
            example: 'က + -္ဍ + = က္ဍ',
            exampleIPA: 'kaˀɗaˀ',
            exampleTH: 'กะดะ',
            compoundWith: ['က', 'ခ', 'စ', 'ပ', 'ဖ', 'သ'],
        },
        {
            letter: 'န',
            tone: 'breathy',
            ipa: 'nɛ̤ˀ',
            th: 'เนียะ',
            thLetter: 'น',
            sound: require('@/assets/sounds/alphabets/row4Column5.mp3'),
            compoundIPA: 'n',
            compoundTH: 'น',
            compound: 'ၞ',
            example: 'က + -ၞ + = ကၞ',
            exampleIPA: 'kaˀnaˀ',
            exampleTH: 'กะนะ',
            compoundWith: ['က', 'ခ', 'ဂ', 'စ', 'ဆ', 'ဇ', 'တ', 'ထ', 'ဒ', 'ပ', 'ဖ', 'ဗ', 'မ', 'သ'],
        },
        {
            letter: 'မ',
            tone: 'breathy',
            ipa: 'mɛ̤ˀ',
            th: 'เมียะ',
            thLetter: 'ม',
            sound: require('@/assets/sounds/alphabets/row5Column5.mp3'),
            compoundIPA: 'm',
            compoundTH: 'ม',
            compound: 'ၟ',
            example: 'က + -ၟ + = ကၟ',
            exampleIPA: 'kaˀmaˀ',
            exampleTH: 'กะมะ',
            compoundWith: ['က', 'ခ', 'စ', 'ပ', 'ဖ', 'တ', 'ထ', 'ဒ', 'ပ', 'ဖ', 'ဗ', 'မ', 'သ', 'လ'],
        },
        {
            letter: 'ယ',
            tone: 'breathy',
            ipa: 'jɛ̤ˀ',
            th: 'เยียะ',
            thLetter: 'ย',
            sound: require('@/assets/sounds/alphabets/rowNoneColumn1.mp3'),
            compoundIPA: 'j',
            compoundTH: 'ย',
            compound: 'ျ',
            example: 'က + -ျ + = ကျ',
            exampleIPA: 'kjaˀ',
            exampleTH: 'กยะ',
            compoundWith: ['က', 'ခ', 'ဂ', 'စ', 'ဆ', 'ဇ', 'တ', 'ထ', 'ဒ', 'ပ', 'ဖ', 'ဗ', 'မ', 'သ'],
        },
        {
            letter: 'ရ',
            tone: 'breathy',
            ipa: 'rɛ̤ˀ',
            th: 'เรียะ',
            thLetter: 'ร',
            sound: require('@/assets/sounds/alphabets/rowNoneColumn2.mp3'),
            compoundIPA: 'r',
            compoundTH: 'ร',
            compound: 'ြ',
            example: 'က + -ြ + = ကြ',
            exampleIPA: 'kraˀ',
            exampleTH: 'กระ',
            compoundWith: ['က', 'ခ', 'ဂ', 'စ', 'ဆ', 'ဇ', 'တ', 'ထ', 'ဒ', 'ပ', 'ဖ', 'ဗ', 'မ', 'သ'],
        },
        {
            letter: 'လ',
            tone: 'breathy',
            ipa: 'lɛ̤ˀ',
            th: 'เลียะ',
            thLetter: 'ล',
            sound: require('@/assets/sounds/alphabets/rowNoneColumn3.mp3'),
            compoundIPA: 'l',
            compoundTH: 'ล',
            compound: 'ၠ',
            example: 'က + -ၠ + = ကၠ',
            exampleIPA: 'klaˀ',
            exampleTH: 'กละ',
            compoundWith: ['က', 'ခ', 'ဂ', 'စ', 'ဆ', 'ဇ', 'တ', 'ထ', 'ဒ', 'ပ', 'ဖ', 'ဗ', 'မ', 'သ'],
        },
        {
            letter: 'ဝ',
            tone: 'breathy',
            ipa: 'wɛ̤ˀ',
            th: 'เวียะ',
            thLetter: 'ว',
            sound: require('@/assets/sounds/alphabets/rowNoneColumn4.mp3'),
            compoundIPA: 'w',
            compoundTH: 'ว',
            compound: 'ွ',
            example: 'က + -ွ + = ကွ',
            exampleIPA: 'kwaˀ',
            exampleTH: 'กวะ',
            compoundWith: ['က', 'ခ', 'ဂ', 'စ', 'ဆ', 'ဇ', 'တ', 'ထ', 'ဒ', 'ပ', 'ဖ', 'ဗ', 'မ', 'သ'],
        },
        {
            letter: 'ဟ',
            tone: 'clear',
            ipa: 'haˀ',
            th: 'ฮะ',
            thLetter: 'ฮ',
            sound: require('@/assets/sounds/alphabets/rowNoneColumn6.mp3'),
            compoundIPA: 'h',
            compoundTH: 'ฮ',
            compound: 'ှ',
            example: 'ည + -ှ = ညှ',
            exampleIPA: 'hɲaˀ',
            exampleTH: 'ฮญะ',
            compoundWith: ['ည', 'ဏ', 'မ', 'န', 'ယ', 'ရ', 'လ', 'ဝ'],
            selected: 'ည',
        },
        {
            letter: 'ၜ',
            tone: 'clear',
            ipa: 'ɓaˀ',
            th: 'บะ',
            thLetter: 'บ',
            sound: require('@/assets/sounds/alphabets/rowNoneColumn8.mp3'),
            compoundIPA: 'ɓ',
            compoundTH: 'บ',
            compound: '္ၜ',
            example: 'က + -္ၜ = က္ၜ',
            exampleIPA: 'kaˀɓaˀ',
            exampleTH: 'กะบะ',
            compoundWith: ['က', 'စ', 'တ', 'ထ', 'ဗ'],
        },
    ],
    getAll() {
        return this.compoundConsonants;
    },
    getByCompound(compound) {
        return this.compoundConsonants.find(row => row.compound === compound || row.letter === compound);
    },
    getByOverlaps(overlapping, overlapped){
        return this.compoundConsonants.find(row =>
            row.compoundWith.includes(overlapping) && row.letter === overlapped
        );
    },
    isCompoundConsonant(compound){
        const consonant = this.getByCompound(compound);
        return consonant ? true : false;
    },
    isCompoundConsonant2(overlapping, overlapped){
        const consonant = this.getByOverlaps(overlapping, overlapped);
        return consonant ? true : false;
    },
}